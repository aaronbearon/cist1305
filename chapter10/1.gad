// CIST 1305 Lab 12: Algorithms from Chapter 10
// Aaron Blum, 20250410

// Declare OutputFile myFile
// Open myFile "temp.tmp"
// Write myFile "Hello"
// Close myFile
// Display "done"
// Delete "temp.tmp"

Module main()
	// Call problemOne()
	// Call problemTwo()
	// Call problemThree()
	// Call problemFour()
	// Call problemFive()
	// Call problemSixPartOne()
	// Call problemSixPartTwo()
	// Call problemSeven()
	Call problemEight()
	// Call problemNine()
	// Call problemTen()
End Module

Module problemOne()
	// File Display algorithm problem
	Declare InputFile inFile
	Declare Integer val
	Open inFile "numbers.dat"
	While NOT eof(inFile)
		Read inFile val
		Display val
	End While
	Close inFile
End Module

Module problemTwo()
	// Item Counter algorithm problem
	Declare InputFile inFile
	Declare String val
	Declare Integer count = 0
	Open inFile "names.dat"
	While NOT eof(inFile)
		Read inFile val
		Set count = count + 1
	End While
	Display "Total names: ", count, "."
	Close inFile
End Module

Module problemThree()
	// Sum of Numbers algorithm problem
	Declare InputFile inFile
	Declare Integer val = 0, sum = 0
	Open inFile "numbers.dat"
	While NOT eof(inFile)
		Read inFile val
		Set sum = sum + val
	End While
	Display "Sum: ", sum, "."
	Close inFile
End Module

Module problemFour()
	// Average of Numbers algorithm problem
	Declare InputFile inFile
	Declare Integer val = 0, sum = 0, count = 0
	Open inFile "numbers.dat"
	While NOT eof(inFile)
		Read inFile val
		Set sum = sum + val
		Set count = count + 1
	End While
	Display "Average: ", toReal(sum) / count, "."
	Close inFile
End Module

Module problemFive()
	// Largest number problem
	Declare InputFile inFile
	Declare Integer val = 0, max
	Open inFile "numbers.dat"
	Read inFile max
	While NOT eof(inFile)
		Read inFile val
		If val > max Then
			Set max = val
		End If
	End While
	Display "Maximum: ", max, "."
	Close inFile
End Module

Module problemSixPartOne()
	// Golf scores problem
	Declare OutputFile stats
	Declare Integer count, counter, score
	Declare String name
	Display "How many people played golf?"
	Open stats "golf.dat"
	// Input validation
	Do
		Input count
	While count <= 0
	Display "Who played and what were their scores?"
	For counter = 1 To count
		Input name
		Input score
		Write stats name, score
	End For
	Close stats
	Display "File updated."
End Module

Module problemSixPartTwo()
	Declare String name
	Declare Integer score
	Declare InputFile stats
	Open stats "golf.dat"
	While NOT eof(stats)
		Read stats name, score
		Display name, " ", score
	End While
	Close stats
End Module

Module problemSeven()
	Declare String name, minName
	Declare Integer score, min
	Declare InputFile stats
	Open stats "golf.dat"
	Read stats minName, min
	While NOT eof(stats)
		Read stats name, score
		If score < min Then
			Set min = score
			Set minName = name
		End If
	End While
	Close stats
	Display "The best golfer is ", minName, "."
End Module

Module problemEight()
	Declare Integer currentID, readID
	Declare Real readSale, salesPerRep = 0, grandTotal = 0
	Declare InputFile report
	Open report "BrewsterCars.dat"
	Read report readID, readSale
	Set currentID = readID
	While NOT eof(report)
		If currentID != readID Then
			Print "Total sales for this salesperson: ", currencyFormat(salesPerRep)
			Set currentID = readID
			Set salesPerRep = 0
		End If
		Print currentID, " ", readSale
		Set salesPerRep = salesPerRep + readSale
		Set grandTotal = grandTotal + readSale
		Read report readID, readSale
	End While
	Print currentID, " ", readSale
	Set salesPerRep = salesPerRep + readSale
	Set grandTotal = grandTotal + readSale
	Print "Total sales for this salesperson: ", currencyFormat(salesPerRep)
	Set currentID = readID
	Set salesPerRep = 0
	Print "Total of all sales: ", currencyFormat(grandTotal)
	Close report
End Module
